name: Build all

on:
  push:
    branches:
      - master
      - release/*
    paths:
      - 'deps/**'
      - 'src/**'
      - '**/CMakeLists.txt'
      - 'version.inc'
      - 'localization/**'
      - 'resources/**'
      - ".github/workflows/build_*.yml"
  pull_request:
    branches:
      - master
      - release/*
    paths:
      - 'deps/**'
      - 'src/**'
      - '**/CMakeLists.txt'
      - 'version.inc'
      - ".github/workflows/build_*.yml"
  workflow_dispatch: # allows for manual dispatch
    inputs:
      build-deps-only:
        description: 'Only build dependencies (bypasses caching)'
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_all:
    name: Build All
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-20.04
          - os: windows-latest
          - os: macos-12
            arch: x86_64
          - os: macos-12
            arch: arm64
    runs-on: ${{ matrix.os }}

    steps:

      # Setup the environment
      - name: Checkout
        uses: actions/checkout@v3

      - name: setup dev on Windows
        if: inputs.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1

      - name: Get the date on Ubuntu and macOS
        if: inputs.os != 'windows-latest'
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash
        
      - name: Get the date on Windows
        if: inputs.os == 'windows-latest'
        run: echo "date=$(Get-Date -Format 'yyyyMMdd')" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
        shell: pwsh

        
      # Build Dependencies
      - name: Build on Windows
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: |
            choco install strawberryperl
            mkdir ${{ github.workspace }}/deps/build
            mkdir ${{ github.workspace }}/deps/build/OrcaSlicer_dep
            .\build_release_vs2022.bat deps
            .\build_release_vs2022.bat pack
            cd ${{ github.workspace }}/deps/build

      - name: Build on Mac ${{ inputs.arch }}
        if: inputs.os == 'macos-12'
        working-directory: ${{ github.workspace }}
        run: |
            brew install cmake git gettext automake texinfo
            brew list
            mkdir -p ${{ github.workspace }}/deps/build_${{ inputs.arch }}
            mkdir -p ${{ github.workspace }}/deps/build_${{ inputs.arch }}/OrcaSlicer_dep_${{ inputs.arch }}
            brew uninstall --ignore-dependencies zstd
            ./build_release_macos.sh -dp -a ${{ inputs.arch }} -t 10.15
            brew install zstd


      - name: Build on Ubuntu
        if: inputs.os == 'ubuntu-20.04'
        working-directory: ${{ github.workspace }}
        run: |
            sudo apt-get update
            sudo apt-get install -y cmake git g++ build-essential libgl1-mesa-dev m4 \
            libwayland-dev libxkbcommon-dev wayland-protocols extra-cmake-modules pkgconf \
            libglu1-mesa-dev libcairo2-dev libgtk-3-dev libsoup2.4-dev libwebkit2gtk-4.0-dev \
            libgstreamer1.0-dev libgstreamer-plugins-good1.0-dev libgstreamer-plugins-base1.0-dev \
            gstreamer1.0-plugins-bad libosmesa6-dev wget sudo autoconf curl libunwind-dev texinfo
            mkdir -p ${{ github.workspace }}/deps/build
            mkdir -p ${{ github.workspace }}/deps/build/destdir
            sudo ./BuildLinux.sh -ur
            sudo chown $USER -R ./
            ./BuildLinux.sh -dr
            cd deps/build
            tar -czvf OrcaSlicer_dep_ubuntu_$(date +"%Y%m%d").tar.gz destdir
      
            
      - name: Invoke Reusable Workflow
        uses: ${{ github.workspace }}/.github/workflows/build_check_cache.yml@master
        with:
          os: ${{ matrix.os }}
          arch: ${{ matrix.arch }}
          build-deps-only: ${{ github.event.inputs.build-deps-only || false }}
