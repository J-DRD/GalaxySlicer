name: Build GalaxySlicer

on: 
    push:
      branches: 
       - main
       - codespace-opulent-parakeet-r64rrvrvw7jhx5vp
       - dev_9
       - dev_9A
      paths:
       - 'src/**'
       - '**/CMakeLists.txt'
       - 'version.inc'
       - 'localization/**'
       - 'resources/**'
       - ".github/workflows/build_orca.yml"

    pull_request:
      branches: 
       - main
       - codespace-opulent-parakeet-r64rrvrvw7jhx5vp
       - dev_9
       - dev_9A
      paths:
       - 'src/**'
       - '**/CMakeLists.txt'
       - 'version.inc'
       - ".github/workflows/build_orca.yml"
 
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  build_orca:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
          - os: windows-latest
          #- os: macos-12
            #arch: x86_64
          #- os: macos-12
            #arch: arm64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the version and date on Ubuntu and macOS
        if: inputs.os != 'windows-latest'
        run: |
          ver_pure=$(grep 'set(SoftFever_VERSION' version.inc | cut -d '"' -f2)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ver="PR-${{ github.event.number }}"
          else
            ver=V$ver_pure
          fi
          echo "ver=$ver" >> $GITHUB_ENV
          echo "ver_pure=$ver_pure" >> $GITHUB_ENV
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash

      - name: Get the version and date on Windows
        if: inputs.os == 'windows-latest'
        run: |
          $date = Get-Date -Format 'yyyyMMdd'
          $ref = "${{ github.ref }}"
          $eventName = "${{ github.event_name }}"
          $prNumber = "${{ github.event.number }}"
      
          if ($eventName -eq 'pull_request') {
              $ver = "PR" + $prNumber
          } else {
              $versionContent = Get-Content version.inc -Raw
              if ($versionContent -match 'set\(SLIC3R_VERSION "(.*?)"\)') {
                  $ver = $matches[1]
              }
              $ver = "V$ver"
          }
      
          echo "ver=$ver" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date=$date" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date: ${{ env.date }} version: ${{ env.ver }}"
        shell: pwsh
      
      - name: load cached deps
        uses: actions/cache@v3
        with:
          path: ${{ inputs.cache-path }}
          key: ${{ inputs.cache-key }}
        

# Windows
      - name: setup MSVC
        if: inputs.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1

      - name: Install nsis
        if: inputs.os == 'windows-latest'
        run: |
          dir "C:/Program Files (x86)/Windows Kits/10/Include"
          choco install nsis
          
      - name: download deps
        if: matrix.os == 'windows-latest'
        shell: powershell
        run: '(new-object System.Net.WebClient).DownloadFile("https://github.com/SoftFever/OrcaSlicer_deps/releases/download/OrcaSlicer_deps_Oct2023/OrcaSlicer_dep_win64_20230810_vs2022.zip", "$env:temp\OrcaSlicer_dep_win64_20230810_vs2022.zip")'

      - name: maker dir
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: |
          mkdir ${{ github.workspace }}/deps/build
          mkdir ${{ github.workspace }}/deps/build/OrcaSlicer_dep

      - name: extract deps
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/deps/build
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" x %temp%\OrcaSlicer_dep_win64_20230810_vs2022.zip'
      
      # - name: build deps
        # if: matrix.os == 'windows-latest'
        #   id: cache_deps
      #   uses: actions/cache@v3
      #   env:
      #     cache-name: ${{ runner.os }}-cache-orcaslicer_deps
      #   with:
      #     path: ${{ github.workspace }}/deps/build/OrcaSlicer_dep
      #     key: ${{ runner.os }}-build-${{ env.cache-name }}

      # - if: ${{ steps.cache_deps.outputs.cache-hit != 'true' }}
      #   name: build deps
      #   working-directory: ${{ github.workspace }}
      #   continue-on-error: true
      #   run: .\build_release_vs2022.bat deps
    
      # - run:  Get-ChildItem ${{ github.workspace }}/deps/build/ -Exclude OrcaSlicer_dep | Remove-Item -Recurse -Force

      - name: Build slicer Win
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: .\build_release_vs2019.bat slicer
        
      - name: Build slicer Win
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: .\build_release_vs2022.bat slicer

      - name: Create installer Win
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        run: |
          cpack -G NSIS


      - name: pack app
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -tzip OrcaSlicer_dev_build.zip ${{ github.workspace }}/build/OrcaSlicer'


      - name: Pack PDB
        if: inputs.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build/src/Release
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -m0=lzma2 -mx9 Debug_PDB_${{ env.ver }}_for_developers_only.7z  *.pdb'
          
      - name: Upload artifacts Win zip
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Windows_${{ env.ver }}_portable
          path: ${{ github.workspace }}/build/OrcaSlicer_Windows_${{ env.ver }}_portable.zip

      - name: Upload artifacts Win installer
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: OrcaSlicer_Windows_${{ env.ver }}
          path: ${{ github.workspace }}/build/GalaxySlicer*.exe

      - name: Upload artifacts Win PDB
        if: inputs.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: PDB
          path: ${{ github.workspace }}/build/src/Release/Debug_PDB_${{ env.ver }}_for_developers_only.7z

      - name: Deploy Windows release portable
        if: github.ref == 'refs/heads/main' && inputs.os == 'windows-latest'
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: https://uploads.github.com/repos/SoftFever/GalaxySlicer/releases/137995723/assets{?name,label} 
          release_id: 137995723 
          asset_path: ${{ github.workspace }}/build/OrcaSlicer_Windows_${{ env.ver }}_portable.zip
          asset_name: OrcaSlicer_Windows_${{ env.ver }}_portable.zip
          asset_content_type: application/x-zip-compressed 
          max_releases: 1 

      - name: Deploy Windows release installer
        if: github.ref == 'refs/heads/main' && inputs.os == 'windows-latest'
        uses: WebFreak001/deploy-nightly@v3.0.0
        with:
          upload_url: https://uploads.github.com/repos/SoftFever/GalaxySlicer/releases/137995723/assets{?name,label} 
          release_id: 137995723 
          asset_path: ${{ github.workspace }}/build/OrcaSlicer_Windows_Installer_${{ env.ver }}.exe
          asset_name: OrcaSlicer_Windows_Installer_${{ env.ver }}.exe
          asset_content_type: application/x-msdownload
          max_releases: 1 

# Ubuntu
          name: OrcaSlicer_Windows_V${{ env.ver }}_pdb
          path: ${{ github.workspace }}/build/src/Release/*.pdb
          
# Ubuntu
  build:
    runs-on: ubuntu-20.04
    steps:
      - name: Install dependencies
        if: inputs.os == 'ubuntu-20.04'
        run: |
          sudo apt-get update
          sudo apt-get install -y autoconf build-essential cmake curl eglexternalplatform-dev \
            extra-cmake-modules file git libcairo2-dev libcurl4-openssl-dev libdbus-1-dev libglew-dev \
            libglu1-mesa-dev libglu1-mesa-dev libgstreamer1.0-dev libgstreamerd-3-dev \
            libgstreamer-plugins-base1.0-dev libgstreamer-plugins-good1.0-dev libgtk-3-dev \
            libgtk-3-dev libmspack-dev libosmesa6-dev libsecret-1-dev libsoup2.4-dev libssl-dev \
            libudev-dev libwayland-dev libwebkit2gtk-4.0-dev libxkbcommon-dev locales locales-all \
            m4 pkgconf sudo wayland-protocols wget

      - name: Install dependencies from BuildLinux.sh
        if: inputs.os == 'ubuntu-20.04'
        shell: bash
        run: sudo ./BuildLinux.sh -ur

      - name: Fix permissions
        if: inputs.os == 'ubuntu-20.04'
        shell: bash
        run: sudo chown $USER -R ./

      - name: Build deps
        if: matrix.os == 'ubuntu-20.04'
        id: cache_deps
        uses: actions/cache@v3
        env:
          cache-name: ${{ runner.os }}-cache-orcaslicer_deps_x64
        with:
          path: ${{ github.workspace }}/deps/build/destdir
          key: build-${{ env.cache-name }}

      - if: ${{ steps.cache_deps.outputs.cache-hit != 'true' }}
        name: Build deps
        working-directory: ${{ github.workspace }}
        continue-on-error: true
        run: ./BuildLinux.sh -dr

      - name: Download and extract deps
        if: matrix.os == 'ubuntu-20.04'
        working-directory: ${{ github.workspace }}
        run: |
          mkdir -p ${{ github.workspace }}/deps/build
          mkdir -p ${{ github.workspace }}/deps/build/destdir
          curl -LJO https://github.com/SoftFever/OrcaSlicer_deps/releases/download/OrcaSlicer_deps_Oct2023/OrcaSlicer_dep_ubuntu_20231008.zip
          unzip ./OrcaSlicer_dep_ubuntu_20231008.zip -d ${{ github.workspace }}/deps/build/destdir
          chown -R $(id -u):$(id -g) ${{ github.workspace }}/deps/build/destdir
          ls -l ${{ github.workspace }}/deps/build/destdir
          rm OrcaSlicer_dep_ubuntu_20231008.zip

