name: Build Orca

on:
  push:
    branches:
      - main
      - master
    paths:
      - 'src/**'
      - '**/CMakeLists.txt'
      - 'version.inc'
      - 'bbl/**'
      - 'resources/**'
  pull_request:
    branches:
      - main
    paths:
      - 'src/**'
      - '**/CMakeLists.txt'
      - 'version.inc'
      - 'bbl/**'
      - 'resources/**'

jobs:
  build_orca:
    name: Build GalaxySlicer
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    env:
      date: '20240429'
      ver: 0.1
      ver_pure: 100

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get the version and date on Ubuntu and macOS
        if: matrix.os != 'windows-latest'
        run: |
          ver_pure=$(grep 'set(SoftFever_VERSION' version.inc | cut -d '"' -f2)
          if [[ "${{ github.event_name }}" == "pull_request" ]]; then
            ver="PR-${{ github.event.number }}"
          else
            ver="V$ver_pure"
          fi
          echo "ver=$ver" >> $GITHUB_ENV
          echo "ver_pure=$ver_pure" >> $GITHUB_ENV
          echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash

      - name: Get the version and date on Windows
        if: matrix.os == 'windows-latest'
        run: |
          $date = Get-Date -Format 'yyyyMMdd'
          $eventName = "${{ github.event_name }}"
          $prNumber = "${{ github.event.number }}"
      
          if ($eventName -eq 'pull_request') {
              $ver = "PR" + $prNumber
          } else {
              $versionContent = Get-Content version.inc -Raw
              if ($versionContent -match 'set\(SoftFever_VERSION "(.*?)"\)') {
                  $ver = "V" + $matches[1]
              }
          }
      
          echo "ver=$ver" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
          echo "date=$date" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
        shell: pwsh
      
      - name: Setup dependencies
        run: |
          if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
            sudo apt-get update
            sudo apt-get install -y cmake git gettext
          elif [ "${{ matrix.os }}" == "macos-latest" ]; then
            brew install cmake git gettext
          elif [ "${{ matrix.os }}" == "windows-latest" ]; then
            choco install cmake git
          fi

      - name: Build
        run: |
          mkdir -p build
          cd build
          cmake ..
          make
        shell: bash

      - name: Package
        run: |
          cd build
          cpack
        shell: bash

      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: GalaxySlicer-${{ matrix.os }}-${{ env.ver }}
          path: build/*.zip
