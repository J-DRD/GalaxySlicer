name: Build all

on:
  push:
    branches:
      - main
      - master
      - release/*
    paths:
      - 'deps/**'
      - 'src/**'
      - '**/CMakeLists.txt'
      - 'version.inc'
      - 'localization/**'
      - 'resources/**'
      - 'bbl/**'
      - ".github/workflows/build_*.yml"
      
  pull_request:
    branches:
      - main
      - master
      - release/*
    paths:
      - 'deps/**'
      - 'src/**'
      - '**/CMakeLists.txt'
      - 'version.inc'
      - 'localization/**'
      - 'resources/**'
      - 'bbl/**'
      - ".github/workflows/build_*.yml"
      
  workflow_dispatch:
    inputs:
      build-deps-only:
        description: 'Only build dependencies (bypasses caching)'
        type: boolean
        default: false

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:

  build_deps:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: x86_64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: setup dev on Windows
        if: matrix.os == 'windows-latest'
        uses: ilammy/msvc-dev-cmd@v1     
    
      - name: setup msbuild on Windows
        if: matrix.os == 'windows-latest'
        uses: microsoft/setup-msbuild@v1.1

      # Build Windows dependencies
      - name: Build on Windows
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}
        run: |
            choco install strawberryperl
            mkdir ${{ github.workspace }}/deps/build
            mkdir ${{ github.workspace }}/deps/build/GalaxySlicer_dep
            .\build_release_vs2022.bat deps
            
      - name: Cleaning up the Windows Build Directory
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/deps/build
        shell: cmd
        run: |
            rmdir /s /q dep_wxWidgets-prefix
            rmdir /s /q dep_OpenSSL-prefix
            rmdir /s /q dep_OCCT-prefix
            rmdir /s /q dep_CGAL-prefix
            rmdir /s /q dep_Boost-prefix
        
      - name: Pack Windows dependencies
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/deps/build
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -tzip GalaxySlicer_dep.zip ${{ github.workspace }}/deps/build/GalaxySlicer_dep'
        
      - name: Upload Windows dependencies
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: GalaxySlicer_dep
          path: ${{ github.workspace }}/deps/build/GalaxySlicer_dep.zip

      - name: Get the date on Ubuntu and macOS
        if: matrix.os != 'windows-latest'
        run: echo "date=$(date +'%Y%m%d')" >> $GITHUB_ENV
        shell: bash

      - name: Get the date on Windows
        if: matrix.os == 'windows-latest'
        run: echo "date=$(Get-Date -Format 'yyyyMMdd')" | Out-File -Append -FilePath $env:GITHUB_ENV -Encoding utf8
        shell: pwsh

      - name: Build GalaxySlicer
        working-directory: ${{ github.workspace }}
        run: .\build_release_vs2022.bat slicer

      - name: Pack Windows Slicer Build
        if: matrix.os == 'windows-latest'
        working-directory: ${{ github.workspace }}/build
        shell: cmd
        run: '"C:/Program Files/7-Zip/7z.exe" a -tzip GalaxySlicer_WINx64.zip ${{ github.workspace }}/build/GalaxySlicer/'
        
      - name: Upload Windows Slicer Build
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v3
        with:
          name: GalaxySlicer_WINx64
          path: ${{ github.workspace }}/build/GalaxySlicer_WINx64.zip

